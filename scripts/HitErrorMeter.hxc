import funkin.graphics.FunkinSprite;
import funkin.modding.events.ScriptEvent;
import funkin.modding.module.Module;
import funkin.play.PlayState;
import funkin.save.Save;

import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.FlxG;

import Std;

class HitErrorMeter extends Module
{
    var JUDGEMENTS_COLORS_FNF:Map<String, FlxColor> = [
        "sick" => 0xFF2DE356,
        "good" => 0xFF25B5EB,
        "bad" => 0xFFE6B72B,
        "shit" => 0xFFD23534,
        "miss" => 0xFFA244D5
    ];
    var JUDGEMENTS_COLORS_OSU:Map<String, FlxColor> = [
        "sick" => 0xFF2EB9EC,
        "good" => 0xFF4DE110,
        "bad" => 0xFFD1A44B,
        "shit" => 0xFFD1A44B,
        "miss" => 0xFFD1A44B
    ];
    var JUDGEMENTS_COLORS_ADOFAI:Map<String, FlxColor> = [
        "sick" => 0xFF84FB53,
        "good" => 0xFFFCFF50,
        "bad" => 0xFFEA6F4A,
        "shit" => 0xFFEA6F4A,
        "miss" => 0xFFCE2E0C
    ];
    var EARLY_MISS_JUDGEMENT_HIT_DIFF:Float = -170;
    var LATE_MISS_JUDGEMENT_HIT_DIFF:Float = 170;

    var playState:PlayState;

    var hitErrorMeterBG:Array<FunkinSprite>;
    var hitErrorMeterPointer:FunkinSprite;
    var hitErrorMeterJudgements:Array<FunkinSprite>;

    var hitErrorMeterPointerTween:FlxTween;
    var hitErrorMeterJudgementsTweens:Array<FlxTween>;
    
    var modOptions:Map<String, Dynamic>;

    var meterLengthMultiplier:Float;
    var judgementsColors:Map<String, FlxColor>;

    function new():Void
    {
        super("Hit Error Meter", 1);

        modOptions = Save.instance.modOptions.get("HitErrorMeterPreferences");
    }

    function initHitErrorMeter():Void
    {
        if (playState == null || !modOptions.get("isEnabled"))
            return;
        
        meterLengthMultiplier = (modOptions.get("meterLength") / 30.0) * (FlxG.height / 720.0);
        judgementsColors = switch(modOptions.get("meterColorPalette")) {
            case "osu": JUDGEMENTS_COLORS_OSU;
            case "ADOFAI": JUDGEMENTS_COLORS_ADOFAI;
            default: JUDGEMENTS_COLORS_FNF;
        };

        hitErrorMeterJudgements = [];

        hitErrorMeterPointerTween = null;
        hitErrorMeterJudgementsTweens = [];

        hitErrorMeterBG = buildHitErrorMeterBG();
        for (i in 0...hitErrorMeterBG.length)
        {
            var hitErrorMeterSprite:FunkinSprite = hitErrorMeterBG[i];
            hitErrorMeterSprite.zIndex = 851 + i;
            playState.add(hitErrorMeterSprite);
        }

        hitErrorMeterPointer = FunkinSprite.create(FlxG.width - 40, 0, "hitErrorMeterPointer");
        hitErrorMeterPointer.scale.set(0.6, 0.6);
        hitErrorMeterPointer.updateHitbox();
        hitErrorMeterPointer.y = (FlxG.height / 2) - (hitErrorMeterPointer.height / 2);
        hitErrorMeterPointer.scrollFactor.set(0, 0);
        hitErrorMeterPointer.zIndex = 852;
        playState.add(hitErrorMeterPointer);

        for (hitErrorMeterSprite in hitErrorMeterBG)
        {
            hitErrorMeterSprite.cameras = [playState.camHUD];
        }
        hitErrorMeterPointer.cameras = [playState.camHUD];
    }

    function cleanup():Void
    {
        if (playState == null || !modOptions.get("isEnabled"))
            return;

        if (hitErrorMeterBG.length > 0)
        {
            for (hitErrorMeterSprite in hitErrorMeterBG)
            {
                playState.remove(hitErrorMeterSprite);
                hitErrorMeterSprite.destroy();
            }
            hitErrorMeterBG = [];
        }

        if (hitErrorMeterPointer != null)
        {
            if (hitErrorMeterPointerTween != null)
                hitErrorMeterPointerTween.cancel();

            playState.remove(hitErrorMeterPointer);
            hitErrorMeterPointer.destroy();
        }

        clearJudgements();

        meterLengthMultiplier = 1.0;
        judgementsColors = JUDGEMENTS_COLORS_FNF;
    }

    function clearJudgements():Void
    {
        if (!modOptions.get("isEnabled"))
            return;

        if (hitErrorMeterJudgements.length > 0)
        {
            for (judgementSprite in hitErrorMeterJudgements)
            {
                playState.remove(judgementSprite);
                judgementSprite.destroy();
            }
            hitErrorMeterJudgements = [];

            for (judgementTween in hitErrorMeterJudgementsTweens)
            {
                judgementTween.cancel();
            }
            hitErrorMeterJudgementsTweens = [];
        }
    }

    function hasJudgementFading(judgement:String):Bool
    {
        var fadingJudgements:Array<String> = switch(modOptions.get("fadingJudgements")) {
            case "Nothing": [];
            case "OnlySicks": ["sick"];
            case "OnlySicksAndGoods": ["sick", "good"];
            default: ["sick", "good", "bad", "shit", "miss"];
        };
        return fadingJudgements.contains(judgement);
    }

    function buildHitErrorMeterBG():Array<FunkinSprite>
    {
        var hitErrorMeterMissesLine:FunkinSprite = new FunkinSprite(FlxG.width - 48.5, (FlxG.height / 2) - 102);
        hitErrorMeterMissesLine.makeSolidColor(3, 204, judgementsColors["miss"]);
        hitErrorMeterMissesLine.scale.y *= meterLengthMultiplier;
        hitErrorMeterMissesLine.scrollFactor.set(0, 0);

        var hitErrorMeterShitsLine:FunkinSprite = new FunkinSprite(FlxG.width - 48.5, (FlxG.height / 2) - 96);
        hitErrorMeterShitsLine.makeSolidColor(3, 192, judgementsColors["shit"]);
        hitErrorMeterShitsLine.scale.y *= meterLengthMultiplier;
        hitErrorMeterShitsLine.scrollFactor.set(0, 0);

        var hitErrorMeterBadsLine:FunkinSprite = new FunkinSprite(FlxG.width - 48.5, (FlxG.height / 2) - 81);
        hitErrorMeterBadsLine.makeSolidColor(3, 162, judgementsColors["bad"]);
        hitErrorMeterBadsLine.scale.y *= meterLengthMultiplier;
        hitErrorMeterBadsLine.scrollFactor.set(0, 0);

        var hitErrorMeterGoodsLine:FunkinSprite = new FunkinSprite(FlxG.width - 48.5, (FlxG.height / 2) - 54);
        hitErrorMeterGoodsLine.makeSolidColor(3, 108, judgementsColors["good"]);
        hitErrorMeterGoodsLine.scale.y *= meterLengthMultiplier;
        hitErrorMeterGoodsLine.scrollFactor.set(0, 0);

        var hitErrorMeterSicksLine:FunkinSprite = new FunkinSprite(FlxG.width - 48.5, (FlxG.height / 2) - 27);
        hitErrorMeterSicksLine.makeSolidColor(3, 54, judgementsColors["sick"]);
        hitErrorMeterSicksLine.scale.y *= meterLengthMultiplier;
        hitErrorMeterSicksLine.scrollFactor.set(0, 0);

        var hitErrorMeterBlack:FunkinSprite = new FunkinSprite(FlxG.width - 65, (FlxG.height / 2) - 118.5);
        hitErrorMeterBlack.makeSolidColor(36, 237, 0xFF000000);
        hitErrorMeterBlack.scale.y = hitErrorMeterMissesLine.scale.y + 16.5;
        hitErrorMeterBlack.scrollFactor.set(0, 0);

        var hitErrorMeterCenterLine:FunkinSprite = new FunkinSprite(FlxG.width - 51.5, (FlxG.height / 2) - 0.5);
        hitErrorMeterCenterLine.makeSolidColor(9, 1, 0xFFFFFFFF);
        hitErrorMeterCenterLine.scrollFactor.set(0, 0);

        var result:Array<FunkinSprite> = [hitErrorMeterBlack, hitErrorMeterMissesLine, hitErrorMeterShitsLine, hitErrorMeterBadsLine, hitErrorMeterGoodsLine, hitErrorMeterSicksLine, hitErrorMeterCenterLine];
        return result.copy();
    }

    function buildJudgementSprite(color:FlxColor):FunkinSprite
    {
        var judgementSprite:FunkinSprite = FunkinSprite.create(0, 0, "judgementSprite");
        judgementSprite.scale.set(0.06, 0.06);
        judgementSprite.updateHitbox();
        judgementSprite.color = color;
        judgementSprite.scrollFactor.set(0, 0);

        return judgementSprite;
    }

    function movePointerByHitDiff(hitDiff:Float):Void
    {
        if (!modOptions.get("isEnabled"))
            return;

        if (hitErrorMeterPointerTween != null)
            hitErrorMeterPointerTween.cancel();

        var targetY:Float = (FlxG.height / 2) - (hitErrorMeterPointer.height / 2) - (0.6 * meterLengthMultiplier * hitDiff);
        hitErrorMeterPointerTween = FlxTween.tween(hitErrorMeterPointer, {y: targetY}, 0.05,
            {
                ease: FlxEase.sineOut,
                onComplete: function(_)
                {
                    hitErrorMeterPointerTween = null;
                }
            });
    }

    function displayJudgement(judgement:String, hitDiff:Float):Void
    {
        if (playState == null || !modOptions.get("isEnabled"))
            return;

        var judgementColor:FlxColor = 0xFFFFFFFF;
        if (modOptions.get("colorizeJudgements"))
            judgementColor = judgementsColors[judgement];

        var judgementSprite:FunkinSprite = buildJudgementSprite(judgementColor);
        judgementSprite.x = FlxG.width - 62;
        judgementSprite.y = (FlxG.height / 2) - (judgementSprite.height / 2) - (0.6 * meterLengthMultiplier * hitDiff);
        judgementSprite.zIndex = 852;
        judgementSprite.cameras = [playState.camHUD];

        playState.add(judgementSprite);
        hitErrorMeterJudgements.push(judgementSprite);

        var fadeDuration:Float = modOptions.get("fadeDuration");

        var judgementTween:FlxTween;
        if (!hasJudgementFading(judgement))
        {
            if (modOptions.get("colorizeJudgements"))
            {
                judgementTween = FlxTween.color(judgementSprite, 0.5, judgementSprite.color, 0xFFFFFFFF,
                    {
                        startDelay: (fadeDuration - 0.5),
                        onComplete: function(_)
                        {
                            hitErrorMeterJudgementsTweens.remove(judgementTween);
                        }
                    });
                hitErrorMeterJudgementsTweens.push(judgementTween);
            }
        }
        else
        {
            judgementTween = FlxTween.tween(judgementSprite, {alpha: 0}, fadeDuration,
                {
                    onComplete: function(_)
                    {
                        hitErrorMeterJudgements.remove(judgementSprite);
                        hitErrorMeterJudgementsTweens.remove(judgementTween);

                        playState.remove(judgementSprite);
                        judgementSprite.destroy();
                    }
                });
            hitErrorMeterJudgementsTweens.push(judgementTween);
        }

        movePointerByHitDiff(hitDiff);
    }

    override function onStateChangeBegin(event:StateChangeScriptEvent):Void
    {
        super.onStateChangeBegin(event);

        if (!Std.isOfType(event.targetState, PlayState) && playState != null)
        {
            cleanup();
            playState = null;
        }
    }

    override function onStateChangeEnd(event:StateChangeScriptEvent):Void
    {
        super.onStateChangeEnd(event);

        if (Std.isOfType(event.targetState, PlayState) && playState == null)
        {
            playState = PlayState.instance;
            initHitErrorMeter();
        }
    }

    override function onDestroy(event:ScriptEvent):Void
    {
        if (playState != null)
        {
            cleanup();
            playState = null;
        }

        super.onDestroy(event);
    }

    override function onPause(event:PauseScriptEvent):Void
    {
        super.onPause(event);

        if (playState != null)
        {
            if (modOptions.get("isEnabled"))
            {
                if (hitErrorMeterPointerTween != null)
                {
                    hitErrorMeterPointerTween.active = false;
                }

                for (judgementTween in hitErrorMeterJudgementsTweens)
                {
                    judgementTween.active = false;
                }
            }
        }
    }

    override function onResume(event:ScriptEvent):Void
    {
        super.onResume(event);

        if (playState != null)
        {
            if (modOptions.get("isEnabled"))
            {
                if (hitErrorMeterPointerTween != null)
                {
                    hitErrorMeterPointerTween.active = true;
                }

                for (judgementTween in hitErrorMeterJudgementsTweens)
                {
                    judgementTween.active = true;
                }
            }
        }
    }

    override function onSongRetry(event:SongRetryEvent):Void
    {
        super.onSongRetry(event);

        if (playState != null)
        {
            clearJudgements();
            movePointerByHitDiff(0);
        }
    }

    override function onNoteHit(event:HitNoteScriptEvent):Void
    {
        super.onNoteHit(event);

        if (playState != null)
        {
            if (event.judgement != "perfect" && event.judgement != "miss")
            {
                displayJudgement(event.judgement, event.hitDiff);
            }
        }
    }

    override function onNoteMiss(event:NoteScriptEvent):Void
    {
        super.onNoteMiss(event);

        if (playState != null)
        {
            displayJudgement("miss", LATE_MISS_JUDGEMENT_HIT_DIFF);
        }
    }

    override function onNoteHoldDrop(event:HoldNoteScriptEvent):Void
    {
        super.onNoteMiss(event);

        if (playState != null)
        {
            displayJudgement("miss", EARLY_MISS_JUDGEMENT_HIT_DIFF);
        }
    }

    override function onNoteGhostMiss(event:GhostMissNoteScriptEvent):Void
    {
        super.onNoteMiss(event);

        if (playState != null)
        {
            if (modOptions.get("displayGhostMisses"))
            {
                displayJudgement("miss", EARLY_MISS_JUDGEMENT_HIT_DIFF);
            }
        }
    }
}