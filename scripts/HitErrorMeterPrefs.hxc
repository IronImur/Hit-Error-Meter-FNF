import funkin.modding.events.ScriptEvent;
import funkin.modding.module.Module;
import funkin.ui.options.OptionsState;
import funkin.ui.options.PreferencesMenu;

import flixel.FlxSprite;
import flixel.util.FlxSave;

import Std;

class HitErrorMeterPrefs extends Module
{
    var save:FlxSave;

    function new():Void
    {
        super("Hit Error Meter Preferences", 0);

        save = new FlxSave();
        save.bind("HitErrorMeterPreferences", "IronImur");

        if (save.data.enableHitErrorMeter == null)
            save.data.enableHitErrorMeter = true;

        if (save.data.meterColorPalette == null)
            save.data.meterColorPalette = "FNF";

        if (save.data.meterLength == null)
            save.data.meterLength = 60;

        if (save.data.colorizeJudgements == null)
            save.data.colorizeJudgements = true;

        if (save.data.fadingJudgements == null)
            save.data.fadingJudgements = "All";

        if (save.data.fadeDuration == null)
            save.data.fadeDuration = 3.0;

        if (save.data.displayGhostMisses == null)
            save.data.displayGhostMisses = false;

        save.flush();
    }

    function createPrefItemsHeader(preferencesMenu:PreferencesMenu, headerName:String, headerDesc:String, yOffset:Int = 0):Void
    {
        if (preferencesMenu == null)
            return;

        preferencesMenu.items.createItem(10, (120 * preferencesMenu.items.length) + 30 + yOffset, headerName, "bold", function() {}, true);
        preferencesMenu.preferenceItems.add(new FlxSprite().makeGraphic(0, 0, 0x00000000));
        preferencesMenu.preferenceDesc.push(headerDesc);
    }

    override function onStateChangeEnd(event:StateChangeScriptEvent):Void
    {
        super.onStateChangeEnd(event);

        if (Std.isOfType(event.targetState, OptionsState))
        {
            var preferencesMenu:PreferencesMenu = event.targetState.optionsCodex.pages.get("preferences");
            if (preferencesMenu != null)
            {
                createPrefItemsHeader(preferencesMenu, "- Hit Error Meter -", "Customize the hit error meter with the settings below.", 10);

                preferencesMenu.createPrefItemCheckbox("Enable Hit Error Meter", "If disabled, hit error meter will be hidden from the screen.", function(value:Bool):Void {
                    save.data.enableHitErrorMeter = value;
                    save.flush();
                }, save.data.enableHitErrorMeter);

                preferencesMenu.createPrefItemEnum("Color Palette", "Palette of hit error meter and its judgements.", [
                    "Funkin" => "FNF",
                    "ADOFAI" => "ADOFAI",
                    "osu!mania" => "osu"
                ], function(key:String, value:String):Void {
                    save.data.meterColorPalette = value;
                    save.flush();
                }, switch(save.data.meterColorPalette)
                {
                    case "FNF": "Funkin";
                    case "ADOFAI": "ADOFAI";
                    case "osu": "osu!mania";
                });

                preferencesMenu.createPrefItemNumber("Meter Length", "Length of hit error meter (in percents of screen height).", function(value:Float):Void {
                    save.data.meterLength = value;
                    save.flush();
                }, function(value:Float):String {
                    return (value + "%");
                }, save.data.meterLength, 30, 90, 10, 0);

                preferencesMenu.createPrefItemCheckbox("Colorize Judgements", "If disabled, all judgements will have white color at the time of popping up.", function(value:Bool):Void {
                    save.data.colorizeJudgements = value;
                    save.flush();
                }, save.data.colorizeJudgements);

                preferencesMenu.createPrefItemEnum("Fade Judgements", "Judgements that will be faded after a while during the song.", [
                    "Only Sick!!" => "OnlySicks",
                    "Nothing" => "Nothing",
                    "Sick!! and Good!" => "OnlySicksAndGoods",
                    "All" => "All"
                ], function(key:String, value:String):Void {
                    save.data.fadingJudgements = value;
                    save.flush();
                }, switch(save.data.fadingJudgements)
                {
                    case "OnlySicks": "Only Sick!!";
                    case "Nothing": "Nothing";
                    case "OnlySicksAndGoods": "Only Sick!! and Good!";
                    case "All": "All";
                });

                preferencesMenu.createPrefItemNumber("Fade Duration", "Duration of judgements' fading (in seconds).", function(value:Float):Void {
                    save.data.fadeDuration = value;
                    save.flush();
                }, function(value:Float):String {
                    return (value + "s");
                }, save.data.fadeDuration, 1.0, 5.0, 0.5, 1);

                preferencesMenu.createPrefItemCheckbox("Display Ghost Misses", "If enabled, your ghost misses will be displayed on the meter.", function(value:Bool):Void {
                    save.data.displayGhostMisses = value;
                    save.flush();
                }, save.data.displayGhostMisses);

                createPrefItemsHeader(preferencesMenu, "- Hit Error Meter -", "Customize the hit error meter with the settings above.", -10);
            }
        }
    }
}
